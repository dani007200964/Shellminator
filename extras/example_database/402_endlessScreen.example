EXCLUDE=NONE
CATEGORY=Advanced

++--HEADER--++

/*
 * Created on Aug 10 2020
 *
 * Copyright (c) {{ YEAR }} - Daniel Hajnal
 * hajnal.daniel96@gmail.com
 * This file is part of the Shellminator project.
 * Modified {{ YEAR }}.{{ MONTH }}.{{ DAY }}
 *
 * To test this example, you need a terminal emulator like PuTTY or Minicom.
 * This example shows a simple setup for Shellminator. It will create an
 * interactive interface, but it does not execute any command.
 * See Shellminator_execute example for further information.
*/

++--INCLUDES--++

#include "Shellminator.hpp"
#include "Shellminator-Screen.hpp"
#include "GUI/Shellminator-ScreenGrid.hpp"
#include "GUI/Shellminator-Buttons.hpp"

++--GLOBAL_VARIABLES--++

ShellminatorButton button_1( "BTN 1" );
ShellminatorButton button_2( "BTN 2" );
ShellminatorButton button_3( "BTN 3" );
ShellminatorButton button_4( "BTN 4" );

// Create a grid 2 rows and 2 columns
ShellminatorScreenGrid grid( 2, 2 );

// Create a Shellminator object, and initialize it to use {{ channel }}
Shellminator shell( &{{ channel }} );

Shellminator::shellEvent_t button_1_event;
Shellminator::shellEvent_t button_2_event;
Shellminator::shellEvent_t button_3_event;
Shellminator::shellEvent_t button_4_event;

bool trigger = false;

++--FUNCTION_PROTOTYPES--++

void button_click( ShellminatorScreen* screen );

void endCallback( Shellminator* parent );

++--SETUP--++


    // Clear the terminal
    shell.clear();

    {{ channel }}.println( "Program Start!" );

    // Place button_1 to the first row and the first column.
    grid.addWidget( &button_1, 0, 0 );

    // Place button_2 to the first row and the second column.
    grid.addWidget( &button_2, 0, 1 );

    // Place button_3 to the second row and the first column.
    grid.addWidget( &button_3, 1, 0 );

    // Place button_3 to the second row and the second column.
    grid.addWidget( &button_4, 1, 1 );


    button_1_event.type = Shellminator::SHELL_EVENT_KEY;
    button_1_event.data = (uint8_t)'a';
    button_2_event.type = Shellminator::SHELL_EVENT_KEY;
    button_2_event.data = (uint8_t)'b';
    button_3_event.type = Shellminator::SHELL_EVENT_KEY;
    button_3_event.data = (uint8_t)'c';
    button_4_event.type = Shellminator::SHELL_EVENT_KEY;
    button_4_event.data = (uint8_t)'d';

    button_1.attachEvent( button_1_event );
    button_2.attachEvent( button_2_event );
    button_3.attachEvent( button_3_event );
    button_4.attachEvent( button_4_event );

    button_1.attachTriggerFunction( button_click );
    button_2.attachTriggerFunction( button_click );
    button_3.attachTriggerFunction( button_click );
    button_4.attachTriggerFunction( button_click );

    grid.attachEndFunction( endCallback );

    // Initialize shell object.
    shell.begin( "arnold" );

    // Register the Screen object. The terminal will pass
    // the control to it, until the user presses the ESC button.
    shell.beginScreen( &grid );

++--LOOP--++

// Process the new data.
shell.update();

++--FUNCTION_IMPLEMENTATIONS--++

void button_click( ShellminatorScreen* screen ){
    Shellminator* parent;
    Shellminator::textColor_t color;
    
    parent = screen -> getParent();
    if( parent == NULL ){
        return;
    }

    trigger = !trigger;

    if( trigger ){
        color = Shellminator::RED;
    }
    else{
        color = Shellminator::YELLOW;
    }

    button_1.setColor( color );
    button_2.setColor( color );
    button_3.setColor( color );
    button_4.setColor( color );

    parent -> requestRedraw();
    
}

void endCallback( Shellminator* parent ){
    if( parent == NULL ){
        return;
    }
    
    parent -> swapScreen( &grid );
}
